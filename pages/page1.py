import streamlit as st

st.markdown("""
    <style>
        body {
            background-color: black;
            color: white;
        }
        pre, code {
            background-color: black !important;
            color: #00FF00 !important;
            font-size: 16px;
        }
    </style>
""", unsafe_allow_html=True)

st.title("üìö ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ")

st.write("---")

st.header("üìÇ ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå")

st.subheader("üß© Tic-Tac-Toe Dataset")
st.write("""
‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tic-Tac-Toe ‡∏°‡∏≤‡∏à‡∏≤‡∏Å [UCI Machine Learning Repository](https://archive.ics.uci.edu/dataset/101/tic+tac+toe+endgame)  
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏° Tic-Tac-Toe ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡πÅ‡∏û‡πâ‡∏ä‡∏ô‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô  
‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
""")

st.code("""
top-left, top-middle, top-right, middle-left, middle-middle, middle-right, bottom-left, bottom-middle, bottom-right, class
x, x, o, x, o, o, o, x, x, positive
o, x, o, x, o, x, x, o, x, negative
...
""", language="plaintext")

st.subheader("üî¢ MNIST Dataset")
st.write("""
‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MNIST ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ç‡∏ô‡∏≤‡∏î 28x28 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•  
‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 0-9 ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏•‡∏≤‡∏¢‡∏°‡∏∑‡∏≠ ‡∏°‡∏≤‡∏à‡∏≤‡∏Å [Kaggle](https://www.kaggle.com/datasets/oddrationale/mnist-in-csv)  
‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô dataset ‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
""")

st.code("""
label, pixel1, pixel2, ..., pixel784
5, 0, 0, ..., 255
0, 34, 0, ..., 128
...
""", language="plaintext")

st.write("---")

st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

st.subheader("üîπ Tic-Tac-Toe")
st.write("""
1. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ('x', 'o', 'b') ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (0, 1, 2)
2. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ('positive', 'negative') ‡πÄ‡∏õ‡πá‡∏ô (1, 0)
3. ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å (80%) ‡πÅ‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (20%)
""")

st.code("""
# ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df.iloc[:, :-1] = df.iloc[:, :-1].apply(le.fit_transform)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ y ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏•‡∏∞ 1
df['class'] = le.fit_transform(df['class'])
""", language="python")

st.subheader("üîπ MNIST")
st.write("""
1. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏à‡∏≤‡∏Å 0-255 ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ 0-1 (Normalization)
2. ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å (80%) ‡πÅ‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (20%)
3. ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Tensor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô PyTorch
""")

st.code("""
# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Tensor
X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.long)
""", language="python")

st.write("---")

st.header("üß† ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ")

st.subheader("üìå Logistic Regression")
st.write("""
**‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î**: ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sigmoid  
‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0 ‡∏ñ‡∏∂‡∏á 1 ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå  
‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏ö‡∏ö Binary (‡πÄ‡∏ä‡πà‡∏ô Tic-Tac-Toe)
""")

st.subheader("üìå Random Forest")
st.write("""
**‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î**: ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (Decision Tree) ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏±‡∏ô  
‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î overfitting ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥  
‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Tic-Tac-Toe
""")

st.subheader("üìå Neural Network (MLP)")
st.write("""
**‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î**: ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏±‡πâ‡∏ô‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô  
‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (MNIST)
""")

st.subheader("üî• Gradient Boosting (GB)")
st.write("""
**‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î**: Gradient Boosting ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á Boosting 
‡∏ã‡∏∂‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÇ‡∏î‡∏¢ Gradient Boosting 
‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ö‡∏ö Sequential (‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß) ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ
""")

st.write("---")

st.header("üî¨ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•")

st.subheader("üß© Tic-Tac-Toe")
st.write("""
1. ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° Logistic Regression, Random Forest, SVM, XGBoost ‡∏Ø‡∏•‡∏Ø  
2. ‡πÉ‡∏ä‡πâ `cross-validation` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î  
3. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
""")

st.code("""
from sklearn.model_selection import cross_val_score
rf_scores = cross_val_score(RandomForestClassifier(), X, y, cv=5)
print(f"Random Forest Accuracy: {rf_scores.mean():.4f}")
""", language="python")

st.subheader("üî¢ MNIST")
st.write("""
1. ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡πÄ‡∏ó‡∏µ‡∏¢‡∏° (Neural Network) ‡∏ó‡∏µ‡πà‡∏°‡∏µ 2 ‡∏ä‡∏±‡πâ‡∏ô  
2. ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `ReLU` ‡πÅ‡∏•‡∏∞ `Softmax` ‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢  
3. ‡πÉ‡∏ä‡πâ `Adam Optimizer` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•  
4. ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 10 epochs
""")

st.code("""
class NeuralNet(nn.Module):
    def __init__(self):
        super(NeuralNet, self).__init__()
        self.fc1 = nn.Linear(784, 128)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = self.fc1(x)
        x = self.relu(x)
        x = self.fc2(x)
        return x
""", language="python")

st.write("---")

st.header("üìà ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")

st.subheader("üß© Tic-Tac-Toe")
st.write("""
- Logistic Regression Accuracy: **0.6927**
- Random Forest Accuracy: **0.9323**
- SVM Accuracy: 0.8802
- Gradient Boosting Accuracy: **0.9271**
- XGBoost Accuracy: **0.8906**
- AdaBoost Accuracy: **0.7552**
- Random Forest Cross-Validation Accuracy: **0.7977**
- SVM Cross-Validation Accuracy: **0.7956**
- Gradient Boosting Cross-Validation Accuracy: **0.8228**
- XGBoost Cross-Validation Accuracy: **0.8123**
- AdaBoost Cross-Validation Accuracy: **0.7014**
**‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ**: Random Forest, Gradient Boosting, XGBoost,K-Nearest Neighbors,Decision Tree ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏á‡πà‡∏≤‡∏¢
""")

st.subheader("üî¢ MNIST")
st.write("""
- Neural Network ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ **98.89%** ‡∏ö‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö
""")

st.write("---")

## üéØ **‡∏™‡∏£‡∏∏‡∏õ**
st.header("üéØ ‡∏™‡∏£‡∏∏‡∏õ")
st.write("""
- Tic-Tac-Toe ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Ñ‡πÄ‡∏ä‡πà‡∏ô Logistic Regression, SVM, XGBoost  
- MNIST ‡πÉ‡∏ä‡πâ Neural Network ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô  
- Random Forest ‡πÅ‡∏•‡∏∞ Neural Network ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ
""")

st.markdown("""## ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å Assingment ‡∏ï‡πà‡∏≤‡∏á ‡∏Å‡∏±‡∏ö chatGPT+DeepSeek ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ train model ‡∏ú‡∏°‡∏Å‡πá‡πÑ‡∏õ‡∏ó‡∏≥‡πÉ‡∏ô Google Colab ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå .pth ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô streamlit ‡∏Ñ‡∏£‡∏±‡∏ö""")
st.markdown("""## ‡∏ú‡∏°‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏´‡∏°‡πÄ‡πÄ‡∏ï‡πà‡∏ú‡∏°‡πÉ‡∏ä‡πâ Tensorflow ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡πÉ‡∏ä‡πâ Pytorch ‡∏Ñ‡∏£‡∏±‡∏ö""")

